// Generated by CoffeeScript 1.9.3
(function() {
  var EventEmitter, OpenVPNClient, Promise, fs, path, spawn, tmp,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  EventEmitter = require('events').EventEmitter;

  path = require('path');

  spawn = require('child_process').spawn;

  tmp = Promise.promisifyAll(require('tmp'));

  fs = Promise.promisifyAll(require('fs'));

  OpenVPNClient = (function(superClass) {
    extend(OpenVPNClient, superClass);

    function OpenVPNClient(vpnOpts1) {
      this.vpnOpts = vpnOpts1 != null ? vpnOpts1 : [];
      this.vpnAddress = null;
      this.proc = null;
      this.auth = null;
      OpenVPNClient.__super__.constructor.call(this);
    }

    OpenVPNClient.prototype.authenticate = function(user, pass) {
      this.auth = {
        user: user,
        pass: pass
      };
      return this;
    };

    OpenVPNClient.prototype._writeAuthFile = function() {
      if (!this.auth) {
        return false;
      }
      return Promise["try"]((function(_this) {
        return function() {
          return tmp.fileAsync().spread(function(tmpPath, fd, cleanup) {
            _this.vpnOpts = _this.vpnOpts.concat(['--auth-user-pass', tmpPath]);
            return fs.writeFileAsync(tmpPath, _this.auth.user + "\n" + _this.auth.pass)["return"](tmpPath).disposer(function() {
              return cleanup();
            });
          });
        };
      })(this));
    };

    OpenVPNClient.prototype.connect = function(cb) {
      return Promise.using(this._writeAuthFile(), (function(_this) {
        return function() {
          return new Promise(function(resolve, reject) {
            var contents;
            contents = fs.readFileSync(_this.vpnOpts[_this.vpnOpts.length - 1], 'utf-8');
            _this.proc = spawn('openvpn', _this.vpnOpts);
            _this.proc.stdout.on('data', function(data) {
              var m;
              _this.emit('data', data);
              data = data.toString();
              m = data.match(/PUSH: Received control message: 'PUSH_REPLY,route [0-9.]+ [0-9.]+,topology \w+,ping \w+,ping-restart \w+,ifconfig ([0-9.]+) [0-9.]+'/);
              if (m) {
                _this.vpnAddress = m[1];
              }
              if (data.match('Initialization Sequence Completed')) {
                _this.emit('connected');
                return resolve();
              }
            });
            return _this.proc.on('close', function(code) {
              reject(code);
              return _this.emit('close', code);
            });
          });
        };
      })(this)).nodeify(cb);
    };

    OpenVPNClient.prototype.disconnect = function(cb) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.proc.kill();
          return _this.proc.on('exit', function() {
            return resolve();
          });
        };
      })(this)).nodeify(cb);
    };

    return OpenVPNClient;

  })(EventEmitter);

  exports.defaultOpts = [];

  exports.create = function(vpnOpts) {
    if (vpnOpts == null) {
      vpnOpts = [];
    }
    vpnOpts = exports.defaultOpts.concat(vpnOpts);
    return new OpenVPNClient(vpnOpts);
  };

  exports.connect = function(auth, vpnOpts) {
    var client;
    if (vpnOpts == null) {
      vpnOpts = [];
    }
    client = exports.create(vpnOpts);
    if (auth != null) {
      client.authenticate(auth.user, auth.pass);
    }
    return client.connect().disposer(function() {
      return client.disconnect();
    });
  };

}).call(this);
